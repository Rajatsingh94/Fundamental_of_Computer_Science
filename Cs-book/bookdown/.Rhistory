# create data frame
EBNFVarDecl <- data.frame(Type, Value, stringsAsFactors = FALSE)
library(knitr)
kable(EBNFVarDecl, caption = "EBNF notation for variable and constant declarations") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Declaration_Example <- c("char gender = 'M';","byte numStudents = 35;","uint statePopulation = 4294967295;","string actName = 'Savitar Trust';","bool lotOptionInd = true;","ulong distanceToMoon = 18446440737095;","float grossRevenue = 12234987654.65;","int firstScore, secondScore;","const int maxGrossWeight = 97693492;","const string stdGreeting = 'Hi There';")
# column 2 vector
Explanation <- c("Declares gender as a variable of type char and initializes it
to the character M","Declares numStudents as a variable of type byte and initializes
it to 35","Declares statePopulation as a variable of type unsigned integer
and initializes it to 4294967295","Declares actName as a variable of type string and initializes
it to the string 'Savitar Trust'","Declares lotOptionInd as a variable of type boolean and initializes
it to the value true","Declares distanceToMoon as a variable of type unsigned
long and initializes it to 18446440737095","Declares grossRevenue as a variable of type float and initializes
it to 12234987654.65","Declares two variables (firstScore, secondScore) as variables
of type integer. Though legal, this practice of declaring two
variable in the same line is discouraged","Declares maxGrossWeight as an integer constant and initializes
it to 97693492","Declares stdGreeting as an string constant and initializes it
to 'Hi There'")
# create data frame
VarDeclEx <- data.frame(Declaration_Example, Explanation, stringsAsFactors = FALSE)
library(knitr)
kable(VarDeclEx, caption = "Declaring variables and constants") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::include_graphics("./Images/CSharpBasics/Illus/ConsoleReadWriteOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/ConsoleReadWriteOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/CalculatorOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/MathClassViewer.png")
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("a, a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_; >;>_, is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |")
# create data frame
Operator <- data.frame(Type, Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Multi-perspective view of a class") %>%
#   kable_styling()
kable(Operator, caption = "C\# operators") %>%
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("a, a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_; >;>_, is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |")
# create data frame
Operator <- data.frame(Type, Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Multi-perspective view of a class") %>%
#   kable_styling()
kable(Operator, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("(a), a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_; >;>_, is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |")
# create data frame
Operator <- data.frame(Type, Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Multi-perspective view of a class") %>%
#   kable_styling()
kable(Operator, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("(a), a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_; >;>_, is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |","$\geq$")
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("(a), a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_; >;>_, is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |")
# create data frame
Operator <- data.frame(Type, Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Multi-perspective view of a class") %>%
#   kable_styling()
kable(Operator, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("(a), a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_ ; >; >_ , is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |")
# create data frame
Operator <- data.frame(Type, Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Multi-perspective view of a class") %>%
#   kable_styling()
kable(Operator, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Type <- c("Primary", "Unary", "Multiplicative","Additive","Shift","Relational","Equality","Logical AND","Logical XOR","Logical OR","Conditional AND","Conditional OR","Conditional","Assignment")
# column 2 vector
Operators <- c("(a), a:b, f (a), a[b], a++, a--, new, typeof, sizeof, checked,
unchecked", "+, -, !, ~ , ++a, --a, T(e)","*, /, %","+,-","<< , >>","< , <_ ; >; >_, is, as","==,!=","&","^","|","&&","||","?:","=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |")
# create data frame
Operator <- data.frame(Type, Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Multi-perspective view of a class") %>%
#   kable_styling()
kable(Operator, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::include_graphics("./Images/CSharpBasics/Illus/MiscOprOut.png")
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Boolean_Symbol <- c("&","|","^","!")
# column 2 vector
Name <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Negation")
# column 3 vector
Example <- c("a&b","a|b","a^b","!a")
# column 4 vector
Remarks <- c("Evaluates to true if both a and b evaluate to true","Evaluates to true if any of a and b evaluates to
true","Evaluates to true if and only if one of the
operands evaluates to true and the other evaluates
to false; otherwise, evaluates to false","Evaluates to true if a is false; otherwise, evaluates
to false")
# create data frame
Operator <- data.frame(Boolean_Symbol, Name, Example, Remarks, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Logical operators") %>%
#   kable_styling()
kable(Operator, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Boolean_Symbol <- c("&","|","^","!")
# column 2 vector
Name <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Negation")
# column 3 vector
Example <- c("a&b","a|b","a^b","!a")
# column 4 vector
Remarks <- c("Evaluates to true if both a and b evaluate to true","Evaluates to true if any of a and b evaluates to
true","Evaluates to true if and only if one of the
operands evaluates to true and the other evaluates
to false; otherwise, evaluates to false","Evaluates to true if a is false; otherwise, evaluates
to false")
# column 1 vector
Bitwise_Symbol <- c("&","|","^","~")
# column 2 vector
Names <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Complement")
# column 3 vector
Examples <- c("a&b","a|b","a^b","~a")
# column 4 vector
Remark <- c("Performs bitwise logical ANDing of a and b.
The result is interpreted as a binary value","Performs bitwise logical ORing of a and b. The
result is interpreted as a binary value","Performs bitwise logical XORing of a and b.
The result is interpreted as a binary value","Performs bitwise complement of a. The result is
interpreted as a binary value")
# create data frame
Operator <- data.frame(Boolean_Symbol, Name, Example, Remarks, stringsAsFactors = FALSE)
Operators <- data.frame(Bitwise_Symbol, Names, Examples, Remark, stringsAsFactors = FALSE)
First <- data.frame(Operator,Operators, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Logical operators") %>%
#   kable_styling()
kable(First, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Boolean_Symbol <- c("&","|","^","!")
# column 2 vector
Name <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Negation")
# column 3 vector
Example <- c("a&b","a|b","a^b","!a")
# column 4 vector
Remarks <- c("Evaluates to true if both a and b evaluate to true","Evaluates to true if any of a and b evaluates to
true","Evaluates to true if and only if one of the
operands evaluates to true and the other evaluates
to false; otherwise, evaluates to false","Evaluates to true if a is false; otherwise, evaluates
to false")
# column 1 vector
Bitwise_Symbol <- c("&","|","^","~")
# column 2 vector
Names <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Complement")
# column 3 vector
Examples <- c("a&b","a|b","a^b","~a")
# column 4 vector
Remark <- c("Performs bitwise logical ANDing of a and b.
The result is interpreted as a binary value","Performs bitwise logical ORing of a and b. The
result is interpreted as a binary value","Performs bitwise logical XORing of a and b.
The result is interpreted as a binary value","Performs bitwise complement of a. The result is
interpreted as a binary value")
# column 1 vector
Short_Circiut <- c("&&","&&")
# column 2 vector
Namess <- c("Control-AND","COntrol-OR")
# column 3 vector
Exampless <- c("a&&b","a||b")
# column 4 vector
Remarkss <- c("Corresponds to a&b, except that b is evaluated
only if a evaluates to true","Corresponds to aj b, except that b is evaluated
only if a evaluates to false")
# column 1 vector
Shift <- c("<<",">>")
# column 2 vector
Nam <- c("Left","COntrol-OR")
# column 3 vector
Exmpl <- c("a<< bitcount","a>> bitcount")
# column 4 vector
Remk <- c("Perform left shift on a by number of bits = bit
count","Perform right shift on a by number of bits = bit
count")
# create data frame
Operator <- data.frame(Boolean_Symbol, Name, Example, Remarks, stringsAsFactors = FALSE)
Operators <- data.frame(Bitwise_Symbol, Names, Examples, Remark, stringsAsFactors = FALSE)
Operatorsymbol <- data.frame(Short_Circiut, Namess, Exampless, Remarkss, stringsAsFactors = FALSE)
Operatorsymbols <- data.frame(Shift, Nam, Exmpl, Remk, stringsAsFactors = FALSE)
First <- data.frame(Operator,Operators,Operatorsymbol,Operatorsymbols, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Logical operators") %>%
#   kable_styling()
kable(First, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Boolean_Symbol <- c("&","|","^","!")
# column 2 vector
Name <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Negation")
# column 3 vector
Example <- c("a&b","a|b","a^b","!a")
# column 4 vector
Remarks <- c("Evaluates to true if both a and b evaluate to true","Evaluates to true if any of a and b evaluates to
true","Evaluates to true if and only if one of the
operands evaluates to true and the other evaluates
to false; otherwise, evaluates to false","Evaluates to true if a is false; otherwise, evaluates
to false")
# column 1 vector
Bitwise_Symbol <- c("&","|","^","~")
# column 2 vector
Names <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Complement")
# column 3 vector
Examples <- c("a&b","a|b","a^b","~a")
# column 4 vector
Remark <- c("Performs bitwise logical ANDing of a and b.
The result is interpreted as a binary value","Performs bitwise logical ORing of a and b. The
result is interpreted as a binary value","Performs bitwise logical XORing of a and b.
The result is interpreted as a binary value","Performs bitwise complement of a. The result is
interpreted as a binary value")
# column 1 vector
Short_Circiut <- c("&&","&&")
# column 2 vector
Namess <- c("Control-AND","COntrol-OR")
# column 3 vector
Exampless <- c("a&&b","a||b")
# column 4 vector
Remarkss <- c("Corresponds to a&b, except that b is evaluated
only if a evaluates to true","Corresponds to aj b, except that b is evaluated
only if a evaluates to false")
# column 1 vector
Shift <- c("<<",">>")
# column 2 vector
Nam <- c("Left","COntrol-OR")
# column 3 vector
Exmpl <- c("a<< bitcount","a>> bitcount")
# column 4 vector
Remk <- c("Perform left shift on a by number of bits = bit
count","Perform right shift on a by number of bits = bit
count")
# create data frame
Operator <- data.frame(Boolean_Symbol, Name, Example, Remarks, stringsAsFactors = FALSE)
Operators <- data.frame(Bitwise_Symbol, Names, Examples, Remark, stringsAsFactors = FALSE)
Operatorsymbol <- data.frame(Short_Circiut, Namess, Exampless, Remarkss, stringsAsFactors = FALSE)
Operatorsymbols <- data.frame(Shift, Nam, Exmpl, Remk, stringsAsFactors = FALSE)
First <- data.frame(Operator,Operators,Operatorsymbol,Operatorsymbols, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Logical operators") %>%
#   kable_styling()
kable(First, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Boolean_Symbol <- c("&","|","^","!")
# column 2 vector
Name <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Negation")
# column 3 vector
Example <- c("a&b","a|b","a^b","!a")
# column 4 vector
Remarks <- c("Evaluates to true if both a and b evaluate to true","Evaluates to true if any of a and b evaluates to
true","Evaluates to true if and only if one of the
operands evaluates to true and the other evaluates
to false; otherwise, evaluates to false","Evaluates to true if a is false; otherwise, evaluates
to false")
# column 1 vector
Bitwise_Symbol <- c("&","|","^","~")
# column 2 vector
Names <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Complement")
# column 3 vector
Examples <- c("a&b","a|b","a^b","~a")
# column 4 vector
Remark <- c("Performs bitwise logical ANDing of a and b.
The result is interpreted as a binary value","Performs bitwise logical ORing of a and b. The
result is interpreted as a binary value","Performs bitwise logical XORing of a and b.
The result is interpreted as a binary value","Performs bitwise complement of a. The result is
interpreted as a binary value")
# column 1 vector
Short_Circiut <- c("&&","&&")
# column 2 vector
Namess <- c("Control-AND","COntrol-OR")
# column 3 vector
Exampless <- c("a&&b","a||b")
# column 4 vector
Remarkss <- c("Corresponds to a&b, except that b is evaluated
only if a evaluates to true","Corresponds to aj b, except that b is evaluated
only if a evaluates to false")
# column 1 vector
Shift <- c("<<",">>")
# column 2 vector
Nam <- c("Left","COntrol-OR")
# column 3 vector
Exmpl <- c("a<< bitcount","a>> bitcount")
# column 4 vector
Remk <- c("Perform left shift on a by number of bits = bit
count","Perform right shift on a by number of bits = bit
count")
# create data frame
Operator <- data.frame(Boolean_Symbol, Name, Example, Remarks, stringsAsFactors = FALSE)
Operators <- data.frame(Bitwise_Symbol, Names, Examples, Remark, stringsAsFactors = FALSE)
Operatorsymbol <- data.frame(Short_Circiut, Namess, Exampless, Remarkss, stringsAsFactors = FALSE)
Operatorsymbols <- data.frame(Shift, Nam, Exmpl, Remk, stringsAsFactors = FALSE)
First <- data.frame(Operator,Operators,Operatorsymbol,Operatorsymbols, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Logical operators") %>%
#   kable_styling()
kable(First, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::include_graphics("./Images/CSharpBasics/Illus/LogicalOprOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/LogicalOprOut.png")
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# create column 1 vector
Expression <- c("a==b", "a!=b", "a<b","a>b","a<=b","a>=b")
# create column 2 vector
Description <- c("true if a is equal to b; false otherwise","true if a is not equal to b; false otherwise","true if a is less than b; false otherwise","true if a is greater than b; false otherwise","true if a is less than or equal to b; false otherwise","true if a is greater than or equal to b; false otherwise")
# create data frame
Rel <- data.frame(Expression, Description, stringsAsFactors = FALSE)
library(knitr)
kable(Rel, caption = "Relational operators' behavior") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::include_graphics("./Images/CSharpBasics/Illus/AssignmentOprOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/AssignmentOprOut.png")
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# create column 1 vector
Exception_Name <- c("DivideByZeroException", "OverflowException", "FormatException","ArgumentOutOfRangeException","IndexOutOfRangeException","ArrayTypeMismatchException","StackOverflowException","InvalidCastException")
# create column 2 vector
Description <- c("Raised when an attempt to divide an integral value by zero occurs.","Raised when an arithmetic operation (in a checked context) overflows.","Raised when the format of an argument does not meet the parameter
specifications of the invoked method.","Raised when the value of an argument is outside the allowable range of
values as defined by the invoked method.","Raised when an an array is accessed via an index that is less than zero
or outside the bounds of the array.","Raised when a value assigned to an array element fails because the actual
type of the assigned value is incompatible with the actual type of
the array.","Raised when the execution stack is exhausted typically due to unbounded
recursion.","Raised when an explicit conversion from a base type or interface to a
derived type fails at run time.")
# create data frame
SysDefExceptions <- data.frame(Exception_Name, Decription, stringsAsFactors = FALSE)
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# create column 1 vector
Exception_Name <- c("DivideByZeroException", "OverflowException", "FormatException","ArgumentOutOfRangeException","IndexOutOfRangeException","ArrayTypeMismatchException","StackOverflowException","InvalidCastException")
# create column 2 vector
Description <- c("Raised when an attempt to divide an integral value by zero occurs.","Raised when an arithmetic operation (in a checked context) overflows.","Raised when the format of an argument does not meet the parameter
specifications of the invoked method.","Raised when the value of an argument is outside the allowable range of
values as defined by the invoked method.","Raised when an an array is accessed via an index that is less than zero
or outside the bounds of the array.","Raised when a value assigned to an array element fails because the actual
type of the assigned value is incompatible with the actual type of
the array.","Raised when the execution stack is exhausted typically due to unbounded
recursion.","Raised when an explicit conversion from a base type or interface to a
derived type fails at run time.")
# create data frame
SysDefExceptions <- data.frame(Exception_Name, Description, stringsAsFactors = FALSE)
library(knitr)
kable(SysDefExceptions, caption = "Some system-defined exceptions") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
knitr::include_graphics("./Images/CSharpBasics/Illus/ExceptionsOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/ExceptionsOut.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/ExceptionsTree.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/UInt16Class.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/UInt16Class.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/UInt16Class.png")
knitr::include_graphics("./Images/CSharpBasics/Illus/UInt16Class.png")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
options(knitr.table.format = "html")
library(knitr)
library(kableExtra)
# column 1 vector
Boolean_Symbol <- c("&","|","^","!")
# column 2 vector
Name <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Negation")
# column 3 vector
Example <- c("a&b","a|b","a^b","!a")
# column 4 vector
Remarks <- c("Evaluates to true if both a and b evaluate to true","Evaluates to true if any of a and b evaluates to
true","Evaluates to true if and only if one of the
operands evaluates to true and the other evaluates
to false; otherwise, evaluates to false","Evaluates to true if a is false; otherwise, evaluates
to false")
# column 1 vector
Bitwise_Symbol <- c("&","|","^","~")
# column 2 vector
Names <- c("Logical-AND","Logical-OR","Logical-XOR","Logical Complement")
# column 3 vector
Examples <- c("a&b","a|b","a^b","~a")
# column 4 vector
Remark <- c("Performs bitwise logical ANDing of a and b.
The result is interpreted as a binary value","Performs bitwise logical ORing of a and b. The
result is interpreted as a binary value","Performs bitwise logical XORing of a and b.
The result is interpreted as a binary value","Performs bitwise complement of a. The result is
interpreted as a binary value")
# column 1 vector
Short_Circiut <- c("&&","&&")
# column 2 vector
Namess <- c("Control-AND","COntrol-OR")
# column 3 vector
Exampless <- c("a&&b","a||b")
# column 4 vector
Remarkss <- c("Corresponds to a&b, except that b is evaluated
only if a evaluates to true","Corresponds to aj b, except that b is evaluated
only if a evaluates to false")
# column 1 vector
Shift <- c("<<",">>")
# column 2 vector
Nam <- c("Left","COntrol-OR")
# column 3 vector
Exmpl <- c("a<< bitcount","a>> bitcount")
# column 4 vector
Remk <- c("Perform left shift on a by number of bits = bit
count","Perform right shift on a by number of bits = bit
count")
# create data frame
Operator <- data.frame(Boolean_Symbol, Name, Example, Remarks,Bitwise_Symbol,Names,Examples,Remark,Short_Circiut,Namess,Exampless,Remarkss,Shift,Nam,Exmpl,Remk, stringsAsFactors = FALSE)
First <- data.frame(Operator, stringsAsFactors = FALSE)
library(knitr)
# table label named tab:tabCrossRef is automatically created
# kable(multiplePerspectives, booktabs = TRUE, caption = "Multi-perspective view of a class")
# kable(multiplePerspectives, caption = "Logical operators") %>%
#   kable_styling()
kable(First, caption = "C# operators") %>%
kable_styling(bootstrap_options = c("striped", "hover"))
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
knitr::include_graphics("./Images/ControlStructs/Illus/ArrayExample2.png")
knitr::include_graphics("./Images/ControlStructs/Illus/ArrayExample2.png")
knitr::include_graphics("./Images/ControlStructs/Illus/ArrayExample.png")
knitr::include_graphics("./Images/ControlStructs/Illus/Enums1Out.png")
knitr::include_graphics("./Images/ControlStructs/Illus/ControlStructs.png")
knitr::include_graphics("./Images/ControlStructs/Illus/SwitchExample.png")
knitr::include_graphics("./Images/ControlStructs/Illus/SwitchStmt1Out.png")
